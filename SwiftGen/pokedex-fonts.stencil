// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if families %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set fontType %}{{param.fontTypeName|default:"FontConvertible"}}{% endset %}
import UIKit.UIFont
import SwiftUI

// MARK: - Fonts

{% macro transformPath path %}
  {%- if param.preservePath -%}
    {{path}}
  {%- else -%}
    {{path|basename}}
  {%- endif -%}
{% endmacro %}
{{accessModifier}} enum {{param.enumName|default:"FontFamily"}} {
  {% for family in families %}
  {{accessModifier}} enum {{family.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} {
    {% for font in family.fonts %}
    {{accessModifier}} static let {{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{fontType}}(name: "{{font.name}}", family: "{{family.name}}", path: "{% call transformPath font.path %}")
    {% endfor %}
    {{accessModifier}} static let all: [{{fontType}}] = [{% for font in family.fonts %}{{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{{ ", " if not forloop.last }}{% endfor %}]
  }
  {% endfor %}
  {{accessModifier}} static let allCustomFonts: [{{fontType}}] = [{% for family in families %}{{family.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}.all{{ ", " if not forloop.last }}{% endfor %}].flatMap { $0 }
  {{accessModifier}} static func registerAllCustomFonts() {
    allCustomFonts.forEach { $0.register() }
  }
}

// MARK: - Implementation Details

{{accessModifier}} struct {{fontType}} {
  {{accessModifier}} let name: String
  {{accessModifier}} let family: String
  {{accessModifier}} let path: String

  {{accessModifier}} func swiftUIFont(size: CGFloat) -> SwiftUI.Font {
    return SwiftUI.Font.custom(self, size: size)
  }

  {{accessModifier}} func swiftUIFont(fixedSize: CGFloat) -> SwiftUI.Font {
    return SwiftUI.Font.custom(self, fixedSize: fixedSize)
  }

  {{accessModifier}} func swiftUIFont(size: CGFloat, relativeTo textStyle: SwiftUI.Font.TextStyle) -> SwiftUI.Font {
    return SwiftUI.Font.custom(self, size: size, relativeTo: textStyle)
  }

  {{accessModifier}} func register() {
    guard let url = url else { return }
    CTFontManagerRegisterFontsForURL(url as CFURL, .process, nil)
  }

  fileprivate func registerIfNeeded() {
    if !UIFont.fontNames(forFamilyName: family).contains(name) {
      register()
    }
  }

  fileprivate var url: URL? {
    {{param.bundle|default:"BundleToken.bundle"}}.url(forResource: path, withExtension: nil)
  }
}

{{accessModifier}} extension UIFont {
  convenience init?(font: {{fontType}}, size: CGFloat) {
    font.registerIfNeeded()
    self.init(name: font.name, size: size)
  }
}

{{accessModifier}} extension SwiftUI.Font {
  static func custom(_ font: {{fontType}}, size: CGFloat) -> SwiftUI.Font {
    font.registerIfNeeded()
    return custom(font.name, size: size)
  }
}

{{accessModifier}} extension SwiftUI.Font {
  static func custom(_ font: {{fontType}}, fixedSize: CGFloat) -> SwiftUI.Font {
    font.registerIfNeeded()
    return custom(font.name, fixedSize: fixedSize)
  }

  static func custom(
    _ font: {{fontType}},
    size: CGFloat,
    relativeTo textStyle: SwiftUI.Font.TextStyle
  ) -> SwiftUI.Font {
    font.registerIfNeeded()
    return custom(font.name, size: size, relativeTo: textStyle)
  }
}
{% if not param.bundle and not param.lookupFunction %}

private final class BundleToken {
  static let bundle: Bundle = {
    Bundle(for: BundleToken.self)
  }()
}
{% endif %}
{% else %}
// No fonts found
{% endif %}